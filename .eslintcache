[{"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/index.js":"1","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/reportWebVitals.js":"2","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/App.js":"3","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/Palette.js":"4","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/seedColors.js":"5","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/ColorBox.js":"6","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/colorHelpers.js":"7","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/Navbar.js":"8","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/PaletteGen.js":"9","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/PaletteList.js":"10","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/MiniPalette.js":"11","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/SinglePaletteGen.js":"12","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/SingleColorPalette.js":"13","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/Footer.js":"14","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/NewPaletteForm.js":"15","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/CreateColorBox.js":"16","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/DraggableColorList.js":"17"},{"size":603,"mtime":1608409758331,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1608125826233,"results":"20","hashOfConfig":"19"},{"size":1110,"mtime":1608389013665,"results":"21","hashOfConfig":"19"},{"size":1057,"mtime":1608246597492,"results":"22","hashOfConfig":"19"},{"size":10062,"mtime":1608230397485,"results":"23","hashOfConfig":"19"},{"size":1787,"mtime":1608296826370,"results":"24","hashOfConfig":"19"},{"size":2215,"mtime":1608214926461,"results":"25","hashOfConfig":"19"},{"size":3111,"mtime":1608297944873,"results":"26","hashOfConfig":"19"},{"size":441,"mtime":1608378761126,"results":"27","hashOfConfig":"19"},{"size":1666,"mtime":1608384489897,"results":"28","hashOfConfig":"19"},{"size":1755,"mtime":1608384672708,"results":"29","hashOfConfig":"19"},{"size":575,"mtime":1608378948631,"results":"30","hashOfConfig":"19"},{"size":1628,"mtime":1608248193413,"results":"31","hashOfConfig":"19"},{"size":297,"mtime":1608246961557,"results":"32","hashOfConfig":"19"},{"size":8717,"mtime":1608431506657,"results":"33","hashOfConfig":"19"},{"size":661,"mtime":1608409200736,"results":"34","hashOfConfig":"19"},{"size":529,"mtime":1608409381898,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"19xxsv2",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/index.js",[],["72","73"],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/reportWebVitals.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/App.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/Palette.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/seedColors.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/ColorBox.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/colorHelpers.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/Navbar.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/PaletteGen.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/PaletteList.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/MiniPalette.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/SinglePaletteGen.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/SingleColorPalette.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/Footer.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/NewPaletteForm.js",["74"],"import React, { useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChromePicker } from \"react-color\";\r\nimport DraggableColorList from \"./DraggableColorList\";\r\nimport  arrayMove from \"array-move\";\r\n\r\nconst drawerWidth = 400;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  appBar: {\r\n    marginTop: \"0\",\r\n    height: \"8vh\",\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"90vh\",\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n}));\r\n\r\nfunction NewPaletteForm({ savePalette, palettes }) {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = useState(true);\r\n  const [colors, setColors] = useState([\r\n    { name: \"Colt Purple\", color: \"purple\" },\r\n    { name: \"Lemongrass Green\", color: \"#C6D747\" },\r\n  ]);\r\n\r\n  const [background, setBackground] = useState(\"#377ED1\");\r\n  const [colorName, setColorName] = useState(\"\");\r\n  const [paletteName, setPaletteName] = useState(\"\");\r\n\r\n  const handleChangeComplete = (color) => {\r\n    setBackground(color.hex);\r\n  };\r\n\r\n  const handleColorNameChange = (event) => {\r\n    setColorName(event.target.value);\r\n  };\r\n\r\n  const handlePaletteNameChange = (event) => {\r\n    setPaletteName(event.target.value);\r\n  };\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const addNewColor = () => {\r\n    const newColor = {\r\n      name: colorName === \"\" ? background : colorName,\r\n      color: background,\r\n    };\r\n    setColors([...colors, newColor]);\r\n    setColorName(\"\");\r\n  };\r\n\r\n  const deleteColor = (colorName) => {\r\n    const filtered = colors.filter((color) => color.name !== colorName);\r\n    setColors(filtered);\r\n  };\r\n\r\n  const handleSavePalette = () => {\r\n    const newPalette = {\r\n      paletteName: paletteName,\r\n      id: paletteName.toLowerCase().replace(/ /g, \"-\"),\r\n      // emoji: ,\r\n      colors: colors,\r\n    };\r\n    savePalette(newPalette);\r\n    history.push(\"/\");\r\n  };\r\n\r\n  ValidatorForm.addValidationRule(\"isColorNameUnique\", (value) =>\r\n    colors.every(({ name }) => name.toLowerCase() !== value.toLowerCase())\r\n  );\r\n\r\n  ValidatorForm.addValidationRule(\"isColorUnique\", (value) =>\r\n    colors.every(({ color }) => color !== background)\r\n  );\r\n\r\n  ValidatorForm.addValidationRule(\"isPaletteNameUnique\", (value) =>\r\n    palettes.every(\r\n      ({ paletteName }) => paletteName.toLowerCase() !== value.toLowerCase()\r\n    )\r\n  );\r\n\r\n  const onSortEnd = ({ oldIndex, newIndex }) => {\r\n    setColors(arrayMove(colors, oldIndex, newIndex));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        color=\"default\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, open && classes.hide)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            Persistent drawer\r\n          </Typography>\r\n          <ValidatorForm\r\n            onSubmit={handleSavePalette}\r\n            onError={(errors) => console.log(errors)}\r\n          >\r\n            <TextValidator\r\n              onChange={handlePaletteNameChange}\r\n              value={paletteName}\r\n              label=\"Palette Name\"\r\n              validators={[\"required\", \"isPaletteNameUnique\"]}\r\n              errorMessages={[\"Enter Palette Name!\", \"Name already used!\"]}\r\n            />\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n              Save Palette\r\n            </Button>\r\n          </ValidatorForm>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <Typography variant=\"h4\">Design Your Palette</Typography>\r\n        <div>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ backgroundColor: \"#e9edf0\", color: \"#da4181\" }}\r\n          >\r\n            Random Color\r\n          </Button>\r\n          <Button variant=\"contained\" color=\"secondary\">\r\n            Clear Palette\r\n          </Button>\r\n        </div>\r\n        <ChromePicker\r\n          color={background}\r\n          onChangeComplete={handleChangeComplete}\r\n        />\r\n        <ValidatorForm\r\n          onSubmit={addNewColor}\r\n          onError={(errors) => console.log(errors)}\r\n        >\r\n          <TextValidator\r\n            onChange={handleColorNameChange}\r\n            value={colorName}\r\n            validators={[\"required\", \"isColorNameUnique\", \"isColorUnique\"]}\r\n            errorMessages={[\r\n              \"Entering a badass color name is necessary!\",\r\n              \"Color name already used!\",\r\n              \"Color already used!\",\r\n            ]}\r\n          />\r\n          {/* <p>\r\n            Get creative with your color names. Don't worry! If you don't add\r\n            one, we will assume you were busy and display the HEX code instead\r\n          </p> */}\r\n          <Button\r\n            variant=\"contained\"\r\n            type=\"submit\"\r\n            color=\"primary\"\r\n            style={{ backgroundColor: background }}\r\n          >\r\n            ADD COLOR\r\n          </Button>\r\n        </ValidatorForm>\r\n\r\n        {/* <List>\r\n            {[\"Inbox\", \"Starred\", \"Send email\", \"Drafts\"].map((text, index) => (\r\n              <ListItem button key={text}>\r\n                <ListItemIcon>\r\n                  {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n                </ListItemIcon>\r\n                <ListItemText primary={text} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n          <Divider />\r\n          */}\r\n      </Drawer>\r\n      <main\r\n        className={clsx(classes.content, {\r\n          [classes.contentShift]: open,\r\n        })}\r\n      >\r\n        <div className={classes.drawerHeader} />\r\n        <DraggableColorList\r\n          axis=\"xy\"\r\n          colors={colors}\r\n          deleteColor={deleteColor}\r\n          onSortEnd={onSortEnd}\r\n          distance={1}\r\n        />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewPaletteForm;\r\n","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/CreateColorBox.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/DraggableColorList.js",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":88,"column":9,"nodeType":"81","messageId":"82","endLine":88,"endColumn":14},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'theme' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]