[{"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/index.js":"1","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/reportWebVitals.js":"2","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/App.js":"3","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/Palette.js":"4","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/seedColors.js":"5","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/ColorBox.js":"6","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/colorHelpers.js":"7","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/Navbar.js":"8","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/PaletteGen.js":"9","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/PaletteList.js":"10","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/MiniPalette.js":"11","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/SinglePaletteGen.js":"12","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/SingleColorPalette.js":"13","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/Footer.js":"14","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/NewPaletteForm.js":"15","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/CreateColorBox.js":"16","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/DraggableColorList.js":"17","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/NewPaletteFormNav.js":"18","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/NewPaletteFormColorPicker.js":"19","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/PaletteNameDialog.js":"20","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/constants.js":"21"},{"size":603,"mtime":1608432061435,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1608125826233,"results":"24","hashOfConfig":"23"},{"size":1637,"mtime":1608577582924,"results":"25","hashOfConfig":"23"},{"size":1057,"mtime":1608605897700,"results":"26","hashOfConfig":"23"},{"size":10062,"mtime":1608230397485,"results":"27","hashOfConfig":"23"},{"size":1787,"mtime":1608296826370,"results":"28","hashOfConfig":"23"},{"size":2215,"mtime":1608214926461,"results":"29","hashOfConfig":"23"},{"size":2975,"mtime":1608606573618,"results":"30","hashOfConfig":"23"},{"size":441,"mtime":1608378761126,"results":"31","hashOfConfig":"23"},{"size":2944,"mtime":1608666865671,"results":"32","hashOfConfig":"23"},{"size":2756,"mtime":1608665437260,"results":"33","hashOfConfig":"23"},{"size":575,"mtime":1608378948631,"results":"34","hashOfConfig":"23"},{"size":1628,"mtime":1608579472077,"results":"35","hashOfConfig":"23"},{"size":453,"mtime":1608605693239,"results":"36","hashOfConfig":"23"},{"size":5884,"mtime":1608655405347,"results":"37","hashOfConfig":"23"},{"size":892,"mtime":1608659557682,"results":"38","hashOfConfig":"23"},{"size":529,"mtime":1608409381898,"results":"39","hashOfConfig":"23"},{"size":4060,"mtime":1608653515731,"results":"40","hashOfConfig":"23"},{"size":3019,"mtime":1608653097059,"results":"41","hashOfConfig":"23"},{"size":3732,"mtime":1608656911026,"results":"42","hashOfConfig":"23"},{"size":55,"mtime":1608652157965,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"19xxsv2",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/index.js",[],["90","91"],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/reportWebVitals.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/App.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/Palette.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/seedColors.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/ColorBox.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/colorHelpers.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/Navbar.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/PaletteGen.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/PaletteList.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/MiniPalette.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/SinglePaletteGen.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/SingleColorPalette.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/Footer.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/NewPaletteForm.js",["92"],"import React, { useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport DraggableColorList from \"./DraggableColorList\";\r\nimport arrayMove from \"array-move\";\r\nimport NewPaletteFormNav from \"./NewPaletteFormNav\";\r\nimport NewPaletteFormColorPicker from \"./NewPaletteFormColorPicker\";\r\nimport { DRAWER_WIDTH as drawerWidth } from \"./constants\";\r\n\r\nconst maxColors = 20;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    height: \"100vh\",\r\n    \"& > *\": {\r\n      // margin: theme.spacing(1),\r\n    },\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    height: \"100vh\",\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    height: \"100vh\",\r\n    overflow: \"hidden\",\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    width: \"100%\",\r\n    // padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: \"flex-end\",\r\n    minHeight: \"8vh !important\",\r\n  },\r\n  // theme.spacing(3)\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"92vh !important\",\r\n    padding: \"0\",\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n  drawerContent: {\r\n    width: \"90%\",\r\n    height: \"95vh\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n  },\r\n  corlorNameInput: {},\r\n  buttons: {\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  button: {\r\n    width: \"49%\",\r\n    \"@media (max-width: 575.98px)\": {\r\n      padding: \"5px\",\r\n    },\r\n  },\r\n  drawerTitle: {\r\n    fontSize: \"1.7rem\",\r\n  },\r\n}));\r\n\r\nfunction NewPaletteForm({ savePalette, palettes }) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = useState(true);\r\n  const [colors, setColors] = useState(palettes[0].colors);\r\n\r\n  const clearPalette = () => {\r\n    setColors([]);\r\n  };\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const addRandomColor = () => {\r\n    const allColors = palettes.map((palette) => palette.colors).flat();\r\n    let randomColorIndex = Math.floor(Math.random() * allColors.length);\r\n    let randomColor = allColors[randomColorIndex];\r\n    let condition1 = colors.every(({ color }) => color !== randomColor.color);\r\n    let condition2 = colors.every(\r\n      ({ name }) => name.toLowerCase() !== randomColor.name.toLowerCase()\r\n    );\r\n    if (condition1 && condition2 && colors.length < maxColors)\r\n      setColors([...colors, randomColor]);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const addNewColor = (newColor) => {\r\n    setColors([...colors, newColor]);\r\n  };\r\n\r\n  const deleteColor = (colorName) => {\r\n    const filtered = colors.filter((color) => color.name !== colorName);\r\n    setColors(filtered);\r\n  };\r\n\r\n  const onSortEnd = ({ oldIndex, newIndex }) => {\r\n    setColors(arrayMove(colors, oldIndex, newIndex));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <NewPaletteFormNav\r\n        colors={colors}\r\n        palettes={palettes}\r\n        savePalette={savePalette}\r\n        open={open}\r\n        handleDrawerOpen={handleDrawerOpen}\r\n      />\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <div className={classes.drawerContent}>\r\n          <Typography gutterBottom variant=\"h4\" className={classes.drawerTitle}>\r\n            Design Your Palette\r\n          </Typography>\r\n          <div className={classes.buttons}>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.button}\r\n              color=\"primary\"\r\n              onClick={addRandomColor}\r\n              style={{ backgroundColor: \"#e9edf0\", color: \"#da4181\" }}\r\n              disabled={colors.length >= maxColors}\r\n            >\r\n              Random Color\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.button}\r\n              color=\"secondary\"\r\n              onClick={clearPalette}\r\n            >\r\n              Clear Palette\r\n            </Button>\r\n          </div>\r\n          <NewPaletteFormColorPicker\r\n            colors={colors}\r\n            addNewColor={addNewColor}\r\n            maxColors={maxColors}\r\n          />\r\n        </div>\r\n      </Drawer>\r\n      <main\r\n        className={clsx(classes.content, {\r\n          [classes.contentShift]: open,\r\n        })}\r\n      >\r\n        <div className={classes.drawerHeader} />\r\n        <DraggableColorList\r\n          axis=\"xy\"\r\n          colors={colors}\r\n          deleteColor={deleteColor}\r\n          onSortEnd={onSortEnd}\r\n          distance={1}\r\n        />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewPaletteForm;\r\n","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/CreateColorBox.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/DraggableColorList.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/NewPaletteFormNav.js",["93"],"import React, { useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PaletteNameDialog from \"./PaletteNameDialog\";\r\nimport { DRAWER_WIDTH as drawerWidth } from \"./constants\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  appBar: {\r\n    marginTop: \"0\",\r\n    height: \"8vh\",\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    \"@media (max-width: 575.98px)\": {\r\n      marginRight: \"0\",\r\n    },\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  navBtns: {\r\n    marginRight: \"1rem\",\r\n    \"& a\": {\r\n      textDecoration: \"0\",\r\n    },\r\n    \"@media (max-width: 575.98px)\": {\r\n      marginRight: \"5px\",\r\n    },\r\n  },\r\n  btn: {\r\n    margin: \"0 0.5rem\",\r\n    \"@media (max-width: 991.98px)\": {\r\n      margin: \"0.2rem\",\r\n      padding: \"0.3rem\",\r\n    },\r\n    \"@media (max-width: 575.98px)\": {\r\n      fontSize: \"8px\",\r\n      padding: \"0.1rem\",\r\n      margin: \"0\",\r\n    },\r\n  },\r\n  navTitle: {\r\n    \"@media (max-width: 991.98px)\": {\r\n      fontSize: \"1rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nfunction NewPaletteFormNav({\r\n  palettes,\r\n  savePalette,\r\n  colors,\r\n  open,\r\n  handleDrawerOpen,\r\n}) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const [formStage, setFormStage] = useState(\"\");\r\n\r\n  const handleClickOpen = () => {\r\n    setFormStage(\"paletteName\");\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setFormStage(\"\");\r\n  };\r\n\r\n  const handleStageChange = () => {\r\n    setFormStage(\"emoji\");\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        color=\"default\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, open && classes.hide)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap className={classes.navTitle}>\r\n            Create a Palette\r\n          </Typography>\r\n        </Toolbar>\r\n        <div className={classes.navBtns}>\r\n          <Link to=\"/\">\r\n            <Button\r\n              className={classes.btn}\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n            >\r\n              Go Back\r\n            </Button>\r\n          </Link>\r\n          <Button\r\n            className={classes.btn}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={handleClickOpen}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </AppBar>\r\n      {formStage ? (\r\n        <PaletteNameDialog\r\n          palettes={palettes}\r\n          savePalette={savePalette}\r\n          colors={colors}\r\n          handleClose={handleClose}\r\n          formStage={formStage}\r\n          handleStageChange={handleStageChange}\r\n        />\r\n      ) : undefined}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewPaletteFormNav;\r\n","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/NewPaletteFormColorPicker.js",["94"],"import React, { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport { ChromePicker } from \"react-color\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    width: \"100%\",\r\n  },\r\n  picker: {\r\n    width: \"100% !important\",\r\n    marginTop: \"1rem\",\r\n  },\r\n  addColorBtn: {\r\n    width: \"100%\",\r\n    padding: \"0.5rem\",\r\n    fontSize: \"2rem\",\r\n    marginTop: \"1rem\",\r\n    \"@media (max-width: 575.98px)\": {\r\n      padding: \"0.2rem\",\r\n      fontSize: \"1.5rem\",\r\n    },\r\n  },\r\n  colorNameInput: {\r\n    width: \"100%\",\r\n    height: \"60px\",\r\n  },\r\n}));\r\n\r\nfunction NewPaletteFormColorPicker({ colors, addNewColor, maxColors }) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [background, setBackground] = useState(\"#377ED1\");\r\n  const [colorName, setColorName] = useState(\"\");\r\n\r\n  ValidatorForm.addValidationRule(\"isColorNameUnique\", (value) =>\r\n    colors.every(({ name }) => name.toLowerCase() !== value.toLowerCase())\r\n  );\r\n\r\n  ValidatorForm.addValidationRule(\"isColorUnique\", (value) =>\r\n    colors.every(({ color }) => color !== background)\r\n  );\r\n\r\n  const handleSubmit = () => {\r\n    const newColor = {\r\n      name: colorName === \"\" ? background : colorName,\r\n      color: background,\r\n    };\r\n    addNewColor(newColor);\r\n    setColorName(\"\");\r\n  };\r\n\r\n  const handleChangeComplete = (color) => {\r\n    setBackground(color.hex);\r\n  };\r\n\r\n  const handleColorNameChange = (event) => {\r\n    setColorName(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <ChromePicker\r\n        color={background}\r\n        onChangeComplete={handleChangeComplete}\r\n        className={classes.picker}\r\n      />\r\n      <ValidatorForm\r\n        onSubmit={handleSubmit}\r\n        onError={(errors) => console.log(errors)}\r\n      >\r\n        <TextValidator\r\n          variant=\"filled\"\r\n          placeholder=\"Color Name\"\r\n          className={classes.colorNameInput}\r\n          onChange={handleColorNameChange}\r\n          value={colorName}\r\n          margin=\"normal\"\r\n          validators={[\"required\", \"isColorNameUnique\", \"isColorUnique\"]}\r\n          errorMessages={[\r\n            \"Entering a badass color name is necessary!\",\r\n            \"Color name already used!\",\r\n            \"Color already used!\",\r\n          ]}\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          type=\"submit\"\r\n          color=\"primary\"\r\n          style={\r\n            colors.length >= maxColors\r\n              ? { backgroundColor: \"gray\", color: \"white\" }\r\n              : { backgroundColor: background }\r\n          }\r\n          disabled={colors.length >= maxColors}\r\n          className={classes.addColorBtn}\r\n        >\r\n          {colors.length >= maxColors ? \"PALETTE FULL\" : \"ADD COLOR\"}\r\n        </Button>\r\n      </ValidatorForm>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewPaletteFormColorPicker;\r\n","/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/PaletteNameDialog.js",[],"/mnt/c/Users/ndsha/Desktop/Web Development/VScode/React/Colt course/color-app/colors-app/src/constants.js",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":95,"column":9,"nodeType":"101","messageId":"102","endLine":95,"endColumn":14},{"ruleId":"99","severity":1,"message":"100","line":83,"column":9,"nodeType":"101","messageId":"102","endLine":83,"endColumn":14},{"ruleId":"99","severity":1,"message":"100","line":33,"column":9,"nodeType":"101","messageId":"102","endLine":33,"endColumn":14},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-unused-vars","'theme' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]